1. Retrieve the unique cities from the buyers' addresses as "_id".
=> db.buyers.aggregate([
  {
    $group: {
      _id: "$address.city"
    }
  }
])

2. Retrieve the unique zip codes from the buyers' addresses as "_id".
=> db.buyers.aggregate([
  {
    $group: {
      _id: "$address.zip"
    }
  }
])

3. Retrieve the unique order_id in ascending order from the order_details.
=> db.order_details.distinct("order_id").sort()

4. Retrieve the unique customer_id from the orders.
=> db.orders.distinct("customer_id")

5. Retrieve the unique paymentMethods from the payments collection as "_id".
=> db.payments.aggregate([
  {
    $group: {
      _id: "$paymentMethod"
    }
  }
])

6. Retrieve the unique payment statuses from the payments collection as "_id".
=> db.payments.aggregate([
  {
    $group: {
      _id: "$paymentstatus"
    }
  }
])

7. Retrieve the unique category_id from products.
=> db.products.distinct("category_id")

8. Aggregate the total sales per customer and list the top 5 customers by total sales amount. Include the customer's ID and their total sales in the output.
=> db.orders.aggregate([
  {
    $group: {
      _id: "$customer_id",
      totalSales: { $sum: "$total" }
    }
  },
  {
    $sort: { totalSales: -1 }
  },
  {
    $limit: 5
  }
])

9. Aggregate the orders to count how many there are per status and show only the first 3 statuses based on the aggregated count.
=> db.orders.aggregate([
  {
    $group: {
      _id: "$status",
      count: { $sum: 1 }
    }
  },
  {
    $sort: { count: -1 }
  },
  {
    $limit: 3
  }
])

10. Calculate the total amount of payments that have a success status.
=> db.payments.aggregate([
  {
    $match: { paymentstatus: "success" }
  },
  {
    $group: {
      _id: null,
      totalAmount: { $sum: "$amount" }
    }
  },
  {
    $project: {
      _id: 0,
      totalAmount: 1
    }
  }
])

11. Find the supplier with the highest total quantity of products supplied, filtering to only include suppliers with a total product quantity greater than 100.
=> db.products.aggregate([
  {
    $group: {
      _id: "$supplier_id",
      totalQuantity: { $sum: "$quantity" }
    }
  },
  {
    $match: { totalQuantity: { $gt: 100 } }
  },
  {
    $sort: { totalQuantity: -1 }
  },
  {
    $limit: 1
  }
])

12.Find the top-selling product category based on total sales revenue.
=> db.order_details.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "_id",
      as: "product_info"
    }
  },
  {
    $unwind: "$product_info"
  },
  {
    $lookup: {
      from: "categories",
      localField: "product_info.category_id",
      foreignField: "_id",
      as: "category_info"
    }
  },
  {
    $unwind: "$category_info"
  },
  {
    $group: {
      _id: "$category_info.name",
      totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } }
    }
  },
  {
    $sort: { totalRevenue: -1 }
  },
  {
    $limit: 1
  }
])
